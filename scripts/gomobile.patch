diff --git a/cmd/gomobile/bind_androidapp.go b/cmd/gomobile/bind_androidapp.go
index 9897fbd..c8505ca 100644
--- a/cmd/gomobile/bind_androidapp.go
+++ b/cmd/gomobile/bind_androidapp.go
@@ -247,7 +247,7 @@ func buildAAR(srcDir, androidDir string, pkgs []*build.Package, androidArchs []s
 
 const (
 	javacTargetVer = "1.7"
-	minAndroidAPI  = 15
+	minAndroidAPI  = 9
 )
 
 func buildJar(w io.Writer, srcDir string) error {
diff --git a/cmd/gomobile/build_androidapp.go b/cmd/gomobile/build_androidapp.go
index 06b2571..85f527d 100644
--- a/cmd/gomobile/build_androidapp.go
+++ b/cmd/gomobile/build_androidapp.go
@@ -79,7 +79,7 @@ func goAndroidBuild(pkg *build.Package, androidArchs []string) (map[string]bool,
 		if err != nil {
 			return nil, err
 		}
-		nmpkgs[arch], err = extractPkgs(toolchain.Path("nm"), libAbsPath)
+		nmpkgs[arch], err = extractPkgs(toolchain.Path(arch, "nm"), libAbsPath)
 		if err != nil {
 			return nil, err
 		}
diff --git a/cmd/gomobile/env.go b/cmd/gomobile/env.go
index 471b009..d0bc2b9 100644
--- a/cmd/gomobile/env.go
+++ b/cmd/gomobile/env.go
@@ -23,7 +23,7 @@ var (
 	androidArmNM string
 	darwinArmNM  string
 
-	allArchs = []string{"arm", "arm64", "386", "amd64"}
+	allArchs = []string{"armv5", "armv7", "arm64", "386", "amd64"}
 )
 
 func buildEnvInit() (cleanup func(), err error) {
@@ -86,12 +86,15 @@ func envInit() (err error) {
 		for arch, toolchain := range ndk {
 			androidEnv[arch] = []string{
 				"GOOS=android",
-				"GOARCH=" + arch,
-				"CC=" + toolchain.Path("clang"),
-				"CXX=" + toolchain.Path("clang++"),
+				"GOARCH=" + archTool(arch),
+				"CC=" + toolchain.Path(arch, "clang"),
+				"CXX=" + toolchain.Path(arch, "clang++"),
 				"CGO_ENABLED=1",
 			}
-			if arch == "arm" {
+			if arch == "armv5" {
+				androidEnv[arch] = append(androidEnv[arch], "GOARM=5")
+			}
+			if arch == "armv7" {
 				androidEnv[arch] = append(androidEnv[arch], "GOARM=7")
 			}
 		}
@@ -108,8 +111,13 @@ func envInit() (err error) {
 		var err error
 		var clang, cflags string
 		switch arch {
-		case "arm":
-			env = append(env, "GOARM=7")
+		case "armv5", "armv7":
+			switch arch {
+			case "armv5":
+				env = append(env, "GOARM=5")
+			case "armv7":
+				env = append(env, "GOARM=7")
+			}
 			fallthrough
 		case "arm64":
 			clang, cflags, err = envClang("iphoneos")
@@ -125,7 +133,7 @@ func envInit() (err error) {
 		}
 		env = append(env,
 			"GOOS=darwin",
-			"GOARCH="+arch,
+			"GOARCH="+archTool(arch),
 			"CC="+clang,
 			"CXX="+clang+"++",
 			"CGO_CFLAGS="+cflags+" -arch "+archClang(arch),
@@ -170,7 +178,9 @@ func envClang(sdkName string) (clang, cflags string, err error) {
 
 func archClang(goarch string) string {
 	switch goarch {
-	case "arm":
+	case "armv5":
+		return "arm"
+	case "armv7":
 		return "armv7"
 	case "arm64":
 		return "arm64"
@@ -183,6 +193,17 @@ func archClang(goarch string) string {
 	}
 }
 
+func archTool(goarch string) string {
+	switch goarch {
+	case "armv5":
+		return "arm"
+	case "armv7":
+		return "arm"
+	default:
+		return goarch
+	}
+}
+
 // environ merges os.Environ and the given "key=value" pairs.
 // If a key is in both os.Environ and kv, kv takes precedence.
 func environ(kv []string) []string {
@@ -235,6 +256,8 @@ func archNDK() string {
 	} else {
 		var arch string
 		switch runtime.GOARCH {
+		case "armv5":
+			arch = "arm"
 		case "386":
 			arch = "x86"
 		case "amd64":
@@ -254,8 +277,8 @@ type ndkToolchain struct {
 	toolPrefix string
 }
 
-func (tc *ndkToolchain) Path(toolName string) string {
-	return filepath.Join(gomobilepath, "ndk-toolchains", tc.arch, "bin", tc.toolPrefix+"-"+toolName)
+func (tc *ndkToolchain) Path(arch string, toolName string) string {
+	return filepath.Join(gomobilepath, "ndk-toolchains", arch, "bin", tc.toolPrefix+"-"+toolName)
 }
 
 type ndkConfig map[string]ndkToolchain // map: GOOS->androidConfig.
@@ -269,7 +292,14 @@ func (nc ndkConfig) Toolchain(arch string) ndkToolchain {
 }
 
 var ndk = ndkConfig{
-	"arm": {
+	"armv5": {
+		arch:       "arm",
+		abi:        "armeabi",
+		platform:   "android-14",
+		gcc:        "arm-linux-androideabi-4.9",
+		toolPrefix: "arm-linux-androideabi",
+	},
+	"armv7": {
 		arch:       "arm",
 		abi:        "armeabi-v7a",
 		platform:   "android-16",
diff --git a/cmd/gomobile/init.go b/cmd/gomobile/init.go
index fba9308..c84724c 100644
--- a/cmd/gomobile/init.go
+++ b/cmd/gomobile/init.go
@@ -8,6 +8,7 @@ import (
 	"bytes"
 	"errors"
 	"fmt"
+	"html/template"
 	"io"
 	"io/ioutil"
 	"os"
@@ -145,6 +146,16 @@ func runInit(cmd *command) error {
 	return nil
 }
 
+const CLANG = `#!/bin/bash
+
+if [ "$1" != "-cc1" ]; then
+    $(dirname $0)/{{.clang}} -target armv5-none-linux-androideabi --sysroot $(dirname $0)/../sysroot -D__ANDROID_API__=14 "$@"
+else
+    # target/triple already spelled out.
+    $(dirname $0)/{{.clang}} "$@"
+fi
+`
+
 func installNDKToolchains(gomobilepath string) error {
 	if initNDK == "" {
 		return nil
@@ -160,11 +171,22 @@ func installNDKToolchains(gomobilepath string) error {
 			"build/tools/make_standalone_toolchain.py",
 			"--arch="+t.arch,
 			"--api="+api,
-			"--install-dir="+filepath.Join(gomobilepath, "ndk-toolchains", t.arch))
+			"--install-dir="+filepath.Join(gomobilepath, "ndk-toolchains", arch))
 		cmd.Dir = initNDK
 		if err := runCmd(cmd); err != nil {
 			return err
 		}
+		if arch == "armv5" {
+			t := template.Must(template.New("main").Parse(CLANG))
+			clang := &bytes.Buffer{}
+			t.Execute(clang, map[string]interface{}{"clang": "clang50"})
+			clangpp := &bytes.Buffer{}
+			t.Execute(clangpp, map[string]interface{}{"clang": template.HTML("clang50++")})
+			ioutil.WriteFile(filepath.Join(gomobilepath, "ndk-toolchains", arch, "bin", "clang"), clang.Bytes(), 0755)
+			ioutil.WriteFile(filepath.Join(gomobilepath, "ndk-toolchains", arch, "bin", "clang++"), clangpp.Bytes(), 0755)
+			ioutil.WriteFile(filepath.Join(gomobilepath, "ndk-toolchains", arch, "bin", "arm-linux-androideabi-clang"), clang.Bytes(), 0755)
+			ioutil.WriteFile(filepath.Join(gomobilepath, "ndk-toolchains", arch, "bin", "arm-linux-androideabi-clang++"), clangpp.Bytes(), 0755)
+		}
 	}
 	return nil
 }
@@ -232,7 +254,7 @@ func installOpenAL(gomobilepath string) error {
 		if abi == "arm" {
 			abi = "armeabi"
 		}
-		tcPath := filepath.Join(gomobilepath, "ndk-toolchains", t.arch, "bin")
+		tcPath := filepath.Join(gomobilepath, "ndk-toolchains", arch, "bin")
 		make := filepath.Join(tcPath, "make")
 		// Split android-XX to get the api version.
 		buildDir := alTmpDir + "/build/" + abi
